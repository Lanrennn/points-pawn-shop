// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract ShrimpNFT is ERC1155, Ownable, ERC1155Burnable {

    //NFT種類
    uint256 public constant Copper_Shrimp = 0;
    uint256 public constant Silver_Shrimp = 1;
    uint256 public constant Golden_Shrimp = 2;
    
    //Shrimp coin
    IERC20 public stakingToken;


    constructor(IERC20 _stakingToken) ERC1155("https://game.example/api/item/{id}.json") {
        _mint(msg.sender, Copper_Shrimp, 10**9, "");
        _mint(msg.sender, Silver_Shrimp, 10**9, "");
        _mint(msg.sender, Golden_Shrimp, 10**9, "");

        stakingToken = _stakingToken;
    }

    function setURI(string memory newuri) public onlyOwner {
        _setURI(newuri);
    }

    function mint(address account, uint256 id, uint256 amount, bytes memory data)
        public
        onlyOwner
    {
        _mint(account, id, amount, data);
    }

    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data)
        public
        onlyOwner
    {
        _mintBatch(to, ids, amounts, data);
    }

    function GetNFT () public {

        require(balanceOf(msg.sender,0)>0,"You already hava Shrimp NFT");
        require(balanceOf(msg.sender,1)>0,"You already hava Shrimp NFT");
        require(balanceOf(msg.sender,2)>0,"You already hava Shrimp NFT");

        uint256 ShrimpBalance = stakingToken.balanceOf(msg.sender);

        if(ShrimpBalance>=100){
            _mint(msg.sender,0, 1, "");

        }else if (ShrimpBalance>=350){
            _mint(msg.sender,1, 1, "");

        }else if(ShrimpBalance>=1000){
            _mint(msg.sender,2, 1, "");

        }else{
            require(ShrimpBalance>100,"Your Shrimp coin is not enough");
        }

    }

    function InquireUserNFT (address UserAddress) public returns (uint256) {
        uint256 UserNFTId =3 ;
        if(balanceOf(UserAddress,0) = 1){
            UserNFTId = 0;
        }else if(balanceOf(UserAddress,1) = 1){
            UserNFTId = 1;
        }else if(balanceOf(UserAddress,2) = 1){
            UserNFTId = 2;
        }
        return UserNFTId;

        // 0=>Copper_Shrimp
        // 1=>Silver_Shrimp
        // 2=>Golden_Shrimp
    }
}
